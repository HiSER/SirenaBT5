/**
 * HiSER (c)2019 Litvin Artem Vasilyevich
 * Date 9 мар. 2019 г.
 * sirenabt5@artemlitvin.com
 */

#include <sirena.hpp>

const uint8 SIRENA::standardWave[] =
	{
		0x7D, 0x73, 0x7F, 0x86, 0x6E, 0x71, 0x8D, 0x99, 0x7B, 0x81, 0x8E, 0x8A, 0x7F, 0x7B, 0x88, 0x8D,
		0x8A, 0x7E, 0x6E, 0x5F, 0x62, 0x87, 0x95, 0x7A, 0x78, 0x88, 0x8A, 0x66, 0x72, 0x93, 0xA4, 0xAA,
		0x98, 0x7A, 0x67, 0x68, 0x67, 0x74, 0x71, 0x7A, 0x97, 0xA6, 0x74, 0x5E, 0x72, 0x7D, 0x6E, 0x8C,
		0xAE, 0xAF, 0xA6, 0x86, 0x6D, 0x58, 0x5D, 0x6A, 0x76, 0x73, 0x86, 0x9C, 0xA1, 0xA2, 0x7D, 0x5B,
		0x59, 0x62, 0x75, 0x8D, 0xA2, 0x95, 0x94, 0x9B, 0x8D, 0x7D, 0x80, 0x80, 0x5D, 0x52, 0x62, 0x77,
		0x8A, 0x96, 0x85, 0x7A, 0x99, 0xA7, 0x95, 0x83, 0x83, 0x69, 0x4F, 0x5D, 0x71, 0x93, 0xAD, 0x98,
		0x72, 0x7F, 0x8B, 0x7E, 0x81, 0x86, 0x6B, 0x6A, 0x7B, 0x7E, 0x8B, 0x95, 0x75, 0x6D, 0x8C, 0x96,
		0x95, 0x96, 0x7C, 0x58, 0x69, 0x76, 0x85, 0x96, 0x7C, 0x65, 0x79, 0x8D, 0x94, 0xAB, 0x9E, 0x5D,
		0x51, 0x66, 0x77, 0x93, 0xAC, 0x84, 0x78, 0x8B, 0x89, 0x7B, 0x86, 0x6D, 0x49, 0x67, 0x82, 0x99,
		0xAB, 0xA2, 0x6A, 0x6F, 0x8E, 0x87, 0x7E, 0x8D, 0x7D, 0x5A, 0x70, 0x7C, 0x8A, 0x97, 0x97, 0x71,
		0x60, 0x75, 0x86, 0x8C, 0x82, 0x90, 0x85, 0x88, 0x86, 0x83, 0x8E, 0x8D, 0x67, 0x3E, 0x5C, 0x7C,
		0x90, 0x99, 0xB1, 0x9D, 0x91, 0x81, 0x70, 0x75, 0x75, 0x55, 0x45, 0x74, 0x9D, 0xB0, 0xAF, 0xA0,
		0x6D, 0x65, 0x6C, 0x81, 0xA0, 0x96, 0x5A, 0x4E, 0x68, 0x77, 0x95, 0xA8, 0x8A, 0x73, 0x8F, 0x96,
		0x95, 0x98, 0x6A, 0x4F, 0x63, 0x72, 0x82, 0x9F, 0x84, 0x60, 0x74, 0x8F, 0x9F, 0xA4, 0x8B, 0x80,
		0x82, 0x71, 0x70, 0x7C, 0x5E, 0x4B, 0x6A, 0x96, 0xA9, 0xAF, 0x97, 0x9C, 0x99, 0x7F, 0x66, 0x60,
		0x36, 0x2F, 0x65, 0x9F, 0xC9, 0xD9, 0xAB, 0x8C, 0x8A, 0x73, 0x4E, 0x4E, 0x56, 0x43, 0x75, 0x9E,
		0xB5, 0xBD, 0xA5, 0x6B, 0x6D, 0x91, 0x91, 0x83, 0x80, 0x53, 0x2A, 0x58, 0x82, 0xA3, 0xBE, 0xBA,
		0x96, 0x9B, 0x90, 0x64, 0x4E, 0x40, 0x2B, 0x5A, 0xA8, 0xC6, 0xD5, 0xBF, 0x82, 0x66, 0x66, 0x57,
		0x6D, 0x7B, 0x59, 0x5D, 0x91, 0xA0, 0xA3, 0x98, 0x83, 0x8D, 0x96, 0x82, 0x87, 0x6C, 0x39, 0x32,
		0x62, 0x94, 0xB5, 0xB7, 0xB4, 0xB8, 0x97, 0x80, 0x66, 0x33, 0x1A, 0x34, 0x71, 0xA8, 0xC2, 0xC4,
		0xC9, 0xAB, 0x9D, 0x84, 0x43, 0x17, 0x24, 0x4A, 0x72, 0xA1, 0xC4, 0xE5, 0xD1, 0xB1, 0x9A, 0x5F,
		0x13, 0x08, 0x2F, 0x67, 0x9C, 0xAD, 0xD4, 0xEE, 0xC6, 0x9C, 0x7F, 0x2F, 0x00, 0x22, 0x56, 0x90,
		0xB6, 0xAD, 0xB9, 0xC7, 0xAE, 0x91, 0x7C, 0x40, 0x16, 0x34, 0x61, 0x95, 0xBA, 0xAD, 0xAB, 0xB6,
		0xA5, 0x8D, 0x74, 0x39, 0x12, 0x38, 0x73, 0xAD, 0xC6, 0xB1, 0xA4, 0xA6, 0x8A, 0x7F, 0x6C, 0x38,
		0x28, 0x57, 0x8A, 0xAA, 0xAE, 0xA7, 0xB3, 0xA5, 0x95, 0x7E, 0x42, 0x22, 0x2B, 0x5F, 0x8E, 0xAD,
		0xC7, 0xDB, 0xC2, 0xA1, 0x81, 0x39, 0x11, 0x18, 0x57, 0x87, 0xA9, 0xCB, 0xE0, 0xBB, 0x9C, 0x75,
		0x40, 0x2E, 0x3C, 0x65, 0x78, 0x8E, 0xB9, 0xD0, 0xB7, 0xA6, 0x70, 0x3E, 0x3E, 0x5A, 0x6C, 0x71,
		0x83, 0xAB, 0xB5, 0xB7, 0xB5, 0x7D, 0x4B, 0x47, 0x4C, 0x67, 0x77, 0x78, 0xA6, 0xBF, 0xB2, 0xB2,
		0x8A, 0x48, 0x37, 0x47, 0x64, 0x86, 0x85, 0xA3, 0xCF, 0xBA, 0x9E, 0x84, 0x4B, 0x26, 0x46, 0x67,
		0x85, 0x9C, 0xA6, 0xC3, 0xBD, 0x99, 0x80, 0x5B, 0x2B, 0x2F, 0x57, 0x80, 0xA2, 0xB2, 0xC6, 0xC4,
		0x9D, 0x8B, 0x60, 0x2C, 0x24, 0x48, 0x74, 0x9B, 0xBA, 0xD5, 0xCA, 0x95, 0x7F, 0x52, 0x35, 0x37,
		0x57, 0x7E, 0x96, 0xC2, 0xD1, 0xB1, 0x88, 0x67, 0x3A, 0x43, 0x52, 0x79, 0x88, 0xA2, 0xC7, 0xC8,
		0xA2, 0x76, 0x3F, 0x30, 0x41, 0x69, 0x86, 0x9C, 0xCE, 0xDC, 0xBD, 0x95, 0x4D, 0x13, 0x1E, 0x4E,
		0x6D, 0x8D, 0xC9, 0xED, 0xDD, 0xC1, 0x83, 0x1E, 0x02, 0x20, 0x4F, 0x7E, 0xA2, 0xD3, 0xF3, 0xDB,
		0xB9, 0x7E, 0x20, 0x00, 0x1B, 0x4B, 0x83, 0xA4, 0xC6, 0xE7, 0xD9, 0xC2, 0x94, 0x33, 0x00, 0x13,
		0x3F, 0x7B, 0xA0, 0xC5, 0xE2, 0xD6, 0xC4, 0x97, 0x3D, 0x0C, 0x18, 0x3F, 0x6F, 0x9A, 0xC1, 0xE7,
		0xD9, 0xBE, 0x89, 0x3C, 0x12, 0x21, 0x48, 0x66, 0x97, 0xD0, 0xEB, 0xE1, 0xBD, 0x68, 0x29, 0x0A,
		0x2D, 0x51, 0x74, 0xB0, 0xE4, 0xF0, 0xDE, 0x95, 0x41, 0x1B, 0x19, 0x34, 0x51, 0x98, 0xD6, 0xF1,
		0xF0, 0xB6, 0x59, 0x2C, 0x21, 0x2C, 0x3D, 0x83, 0xC3, 0xDB, 0xE8, 0xC3, 0x6F, 0x43, 0x3D, 0x39,
		0x37, 0x73, 0xA5, 0xC2, 0xD3, 0xB9, 0x7F, 0x63, 0x5D, 0x4C, 0x3C, 0x67, 0x9B, 0xAE, 0xB7, 0xB0,
		0x83, 0x6F, 0x67, 0x56, 0x46, 0x59, 0x8E, 0xBE, 0xBC, 0xB7, 0x9C, 0x6B, 0x55, 0x45, 0x3A, 0x52,
		0x75, 0xB0, 0xD5, 0xC7, 0xC0, 0x98, 0x5A, 0x35, 0x2B, 0x37, 0x5C, 0x8A, 0xC3, 0xD1, 0xCF, 0xBF,
		0x85, 0x54, 0x2D, 0x30, 0x39, 0x60, 0x99, 0xCA, 0xD4, 0xD3, 0xA4, 0x72, 0x4A, 0x3A, 0x36, 0x37,
		0x70, 0xAF, 0xD4, 0xE2, 0xB9, 0x83, 0x5E, 0x4B, 0x3A, 0x2F, 0x5B, 0x93, 0xC3, 0xDB, 0xBC, 0x8D,
		0x73, 0x60, 0x42, 0x31, 0x5F, 0x8C, 0xB7, 0xC6, 0xAA, 0x85, 0x75, 0x74, 0x4A, 0x3C, 0x72, 0x99,
		0xB8, 0xB6, 0x87, 0x6F, 0x78, 0x77, 0x4C, 0x57, 0x84, 0x9D, 0xB9, 0xA9, 0x6E, 0x65, 0x87, 0x87,
		0x5C, 0x5D, 0x7B, 0x84, 0x9B, 0xA7, 0x77, 0x74, 0x90, 0x95, 0x7A, 0x62, 0x6A, 0x78, 0x7F, 0x91,
		0x88, 0x7B, 0x8A, 0x92, 0x84, 0x69, 0x6F, 0x83, 0x8A, 0x8D, 0x90, 0x76, 0x70, 0x77, 0x7B, 0x6F,
		0x79, 0x96, 0x9E, 0x95, 0x98, 0x73, 0x63, 0x5E, 0x6D, 0x6D, 0x77, 0x9C, 0xAA, 0xA6, 0xA1, 0x78,
		0x60, 0x5E, 0x62, 0x64, 0x6C, 0x99, 0xAC, 0xAD, 0x9E, 0x76, 0x6C, 0x6C, 0x6C, 0x57, 0x64, 0x96,
		0xA9, 0xB0, 0x8A, 0x6A, 0x74, 0x86, 0x7E, 0x53, 0x63, 0x90, 0xA6, 0xA6, 0x76, 0x60, 0x7D, 0xA1,
		0x82, 0x59, 0x70, 0x8B, 0xA7, 0x8C, 0x57, 0x57, 0x8A, 0xB0, 0x8A, 0x7C, 0x87, 0x90, 0x9C, 0x6A,
		0x2C, 0x43, 0x8E, 0xAC, 0xA0, 0xA9, 0xA9, 0x99, 0x93, 0x58, 0x15, 0x37, 0x74, 0x99, 0xA1, 0xB9,
		0xC6, 0xB2, 0x94, 0x5D, 0x23, 0x2F, 0x5D, 0x7E, 0x8A, 0xAB, 0xCF, 0xCD, 0xAA, 0x7B, 0x3D, 0x2D,
		0x3E, 0x5E, 0x6E, 0x94, 0xCF, 0xE2, 0xC3, 0x9A, 0x51, 0x2F, 0x32, 0x4E, 0x5B, 0x82, 0xC8, 0xDC,
		0xD0, 0xA3, 0x5A, 0x3A, 0x3F, 0x52, 0x54, 0x85, 0xBE, 0xCB, 0xC1, 0x8A, 0x56, 0x4F, 0x5D, 0x66,
		0x5E, 0x95, 0xB8, 0xC2, 0xA2, 0x5B, 0x48, 0x5A, 0x7B, 0x76, 0x80, 0xAA, 0xBA, 0xB2, 0x6E, 0x3D,
		0x42, 0x6D, 0x86, 0x82, 0xA6, 0xBC, 0xC2, 0x8F, 0x43, 0x2A, 0x4F, 0x80, 0x78, 0xA0, 0xBD, 0xC8,
		0xB1, 0x65, 0x23, 0x38, 0x7A, 0x7F, 0x82, 0xA7, 0xB8, 0xB6, 0xA1, 0x4F, 0x27, 0x5F, 0x8D, 0x88,
		0x80, 0x9A, 0x9C, 0xA7, 0x99, 0x53, 0x3F, 0x71, 0x92, 0x89, 0x77, 0x8A, 0x97, 0xA4, 0xA0, 0x67,
		0x50, 0x68, 0x85, 0x76, 0x68, 0x85, 0xA0, 0xB1, 0xA8, 0x79, 0x5F, 0x62, 0x72, 0x60, 0x61, 0x8A,
		0xA8, 0xB9, 0xA5, 0x76, 0x67, 0x67, 0x6B, 0x5B, 0x75, 0x96, 0xA4, 0xAC, 0x7C, 0x67, 0x6E, 0x80,
		0x75, 0x72, 0x90, 0x99, 0xA6, 0x7A, 0x55, 0x5B, 0x7F, 0x8B, 0x7F, 0x94, 0x9B, 0xA5, 0x8B, 0x53,
		0x46, 0x66, 0x8C, 0x8C, 0x9E, 0xAA, 0xA3, 0x90, 0x55, 0x38, 0x4D, 0x83, 0x8A, 0xA6, 0xC3, 0xB8,
		0x9F, 0x56, 0x21, 0x27, 0x72, 0x84, 0x9E, 0xD1, 0xD8, 0xC7, 0x87, 0x24, 0x01, 0x42, 0x76, 0x86,
		0xAF, 0xD4, 0xD4, 0xC5, 0x80, 0x15, 0x12, 0x54, 0x7F, 0x80, 0x9E, 0xBE, 0xC7, 0xC2, 0x85, 0x2C,
		0x32, 0x67, 0x79, 0x68, 0x82, 0xAD, 0xC5, 0xC9, 0x85, 0x45, 0x4D, 0x6E, 0x69, 0x53, 0x78, 0xAE,
		0xD1, 0xC8, 0x78, 0x4E, 0x58, 0x6E, 0x58, 0x4E, 0x88, 0xB9, 0xDC, 0xAD, 0x66, 0x53, 0x68, 0x6E,
		0x50, 0x69, 0x95, 0xC5, 0xC0, 0x7C, 0x55, 0x60, 0x7F, 0x6E, 0x72, 0x8E, 0xAB, 0xB1, 0x75, 0x49,
		0x4F, 0x7F, 0x83, 0x91, 0xA4, 0xB0, 0xB2, 0x6F, 0x3B, 0x2D, 0x68, 0x78, 0x9C, 0xBF, 0xC4, 0xC3,
		0x7A, 0x39, 0x20, 0x4E, 0x65, 0x99, 0xC7, 0xCA, 0xCA, 0x8B, 0x44, 0x21, 0x49, 0x59, 0x83, 0xBC,
		0xCB, 0xCC, 0xA3, 0x5C, 0x2B, 0x45, 0x5F, 0x6C, 0x94, 0xB7, 0xBA, 0xB6, 0x8D, 0x4D, 0x4B, 0x6A,
		0x73, 0x6F, 0x8C, 0x99, 0x9D, 0xA7, 0x85, 0x5D, 0x67, 0x83, 0x7B, 0x6C, 0x82, 0x87, 0x9B, 0xA0,
		0x74, 0x60, 0x7B, 0x91, 0x70, 0x72, 0x87, 0x91, 0xA4, 0x7D, 0x58, 0x63, 0x8C, 0x8C, 0x79, 0x94,
		0x92, 0x9D, 0x78, 0x4E, 0x50, 0x7C, 0x9F, 0x93, 0xA3, 0x99, 0x97, 0x70, 0x40, 0x3B, 0x65, 0xA0,
		0xA9, 0xC0, 0xAF, 0x9D, 0x65, 0x33, 0x2A, 0x52, 0x8E, 0xAC, 0xD9, 0xCF, 0xB6, 0x61, 0x20, 0x18,
		0x41, 0x76, 0xA9, 0xE9, 0xE9, 0xD1, 0x68, 0x18, 0x07, 0x3A, 0x63, 0x9F, 0xE1, 0xF3, 0xE7, 0x7F,
		0x20, 0x01, 0x3A, 0x58, 0x8D, 0xCA, 0xE2, 0xE8, 0x9E, 0x3E, 0x11, 0x3C, 0x5E, 0x77, 0xAE, 0xCE,
		0xCE, 0xAE, 0x69, 0x2F, 0x3F, 0x63, 0x6B, 0x85, 0xBA, 0xBC, 0xAF, 0x91, 0x58, 0x40, 0x5E, 0x6E,
		0x6C, 0x9A, 0xB4, 0xAC, 0xA6, 0x76, 0x4F, 0x4F, 0x6F, 0x6F, 0x81, 0xA7, 0xAD, 0xAF, 0x84, 0x53,
		0x43, 0x65, 0x7E, 0x85, 0xA8, 0xAD, 0xB5, 0x86, 0x4C, 0x33, 0x55, 0x80, 0x95, 0xB7, 0xB7, 0xB7,
		0x7E, 0x46, 0x2E, 0x44, 0x72, 0x9E, 0xCB, 0xCC, 0xBD, 0x6C, 0x40, 0x2C, 0x40, 0x62, 0xA4, 0xD3,
		0xDC, 0xBC, 0x65, 0x39, 0x2C, 0x47, 0x5F, 0xAB, 0xD5, 0xE2, 0xA7, 0x5D, 0x36, 0x3B, 0x53, 0x6B,
		0xA9, 0xCC, 0xDC, 0x8F, 0x49, 0x32, 0x5E, 0x70, 0x84, 0xA6, 0xB6, 0xCA, 0x82, 0x31, 0x24, 0x71,
		0x90, 0x9A, 0xAD, 0xAC, 0xB4, 0x8A, 0x32, 0x19, 0x63, 0x9A, 0x9A, 0xA6, 0xAB, 0xA9, 0x9E, 0x5F,
		0x2D, 0x46, 0x83, 0x91, 0x8D, 0xA2, 0x9E, 0xA7, 0x89, 0x54, 0x43, 0x6F, 0x8E, 0x81, 0x91, 0x92,
		0xA4, 0x95, 0x68, 0x4C, 0x68, 0x8B, 0x7F, 0x8F, 0x95, 0xA3, 0x8D, 0x60, 0x53, 0x68, 0x8B, 0x82,
		0x9B, 0xA3, 0xA8, 0x75, 0x52, 0x4E, 0x69, 0x88, 0x97, 0xAC, 0xB2, 0x9F, 0x5A, 0x3F, 0x45, 0x6B,
		0x8E, 0xB8, 0xC5, 0xBD, 0x85, 0x3B, 0x29, 0x3F, 0x74, 0xA6, 0xD6, 0xD5, 0xBA, 0x62, 0x23, 0x16,
		0x42, 0x7F, 0xCC, 0xEE, 0xE2, 0xA0, 0x40, 0x0A, 0x16, 0x51, 0x8D, 0xE2, 0xF8, 0xEA, 0x95, 0x26,
		0x00, 0x1E, 0x5D, 0x96, 0xE8, 0xF8, 0xEA, 0x9A, 0x24, 0x00, 0x22, 0x6B, 0x8F, 0xD1, 0xEC, 0xE0,
		0xA6, 0x3E, 0x01, 0x20, 0x6E, 0x85, 0xAF, 0xD9, 0xD5, 0xAE, 0x5C, 0x20, 0x29, 0x6D, 0x83, 0x95,
		0xC0, 0xC0, 0xB0, 0x6A, 0x3A, 0x3B, 0x6E, 0x83, 0x91, 0xB2, 0xB8, 0xAD, 0x60, 0x40, 0x40, 0x6C,
		0x84, 0xA6, 0xBB, 0xC4, 0x9E, 0x4E, 0x34, 0x36, 0x5E, 0x87, 0xC6, 0xD9, 0xD1, 0x82, 0x3F, 0x23,
		0x34, 0x60, 0x99, 0xD4, 0xE9, 0xBD, 0x64, 0x33, 0x1E, 0x44, 0x82, 0xB7, 0xDD, 0xD6, 0x8E, 0x46,
		0x1C, 0x2A, 0x69, 0xB3, 0xD7, 0xE3, 0xA9, 0x5E, 0x24, 0x18, 0x40, 0x93, 0xD1, 0xE9, 0xDA, 0x8A,
		0x3A, 0x11, 0x24, 0x50, 0xAC, 0xE0, 0xEB, 0xD3, 0x76, 0x20, 0x0E, 0x3F, 0x62, 0xAD, 0xDC, 0xE0,
		0xCE, 0x73, 0x1B, 0x12, 0x51, 0x6F, 0x9E, 0xCA, 0xD4, 0xCA, 0x7B, 0x2E, 0x1F, 0x58, 0x79, 0x8B,
		0xBD, 0xC8, 0xBD, 0x76, 0x40, 0x31, 0x5F, 0x82, 0x92, 0xB7, 0xB7, 0xAA, 0x64, 0x44, 0x3F, 0x66,
		0x87, 0xA9, 0xC1, 0xC0, 0x97, 0x49, 0x31, 0x36, 0x63, 0x94, 0xC9, 0xDC, 0xCF, 0x7D, 0x32, 0x15,
		0x2B, 0x69, 0xB2, 0xE2, 0xEC, 0xB7, 0x65, 0x23, 0x07, 0x2F, 0x8E, 0xD3, 0xF9, 0xDB, 0x8C, 0x47,
		0x0C, 0x06, 0x55, 0xB8, 0xF3, 0xFA, 0xB1, 0x67, 0x26, 0x04, 0x27, 0x8A, 0xD5, 0xFE, 0xD6, 0x84,
		0x44, 0x22, 0x1C, 0x52, 0xA8, 0xDB, 0xF3, 0xBC, 0x63, 0x29, 0x2D, 0x38, 0x6B, 0xB0, 0xD1, 0xEA,
		0xB8, 0x57, 0x22, 0x3E, 0x4F, 0x6D, 0xA3, 0xBD, 0xE4, 0xBB, 0x59, 0x23, 0x4C, 0x67, 0x70, 0x94,
		0xAF, 0xDC, 0xAC, 0x53, 0x2B, 0x52, 0x73, 0x78, 0x9E, 0xBD, 0xD8, 0x8E, 0x47, 0x34, 0x52, 0x67,
		0x80, 0xB1, 0xD6, 0xCA, 0x72, 0x43, 0x35, 0x4C, 0x64, 0x99, 0xCB, 0xDE, 0xA6, 0x5E, 0x3A, 0x39,
		0x4F, 0x78, 0xB7, 0xE4, 0xC3, 0x7C, 0x4A, 0x29, 0x38, 0x6F, 0xA9, 0xE2, 0xD0, 0x92, 0x5F, 0x35,
		0x2A, 0x5F, 0x95, 0xBB, 0xC0, 0xB1, 0x90, 0x5D, 0x43, 0x54, 0x70, 0x84, 0x9F, 0xA3, 0xAC, 0x8D,
		0x4D, 0x3D, 0x4C, 0x86, 0xB8, 0xCA, 0xAE, 0x8C, 0x69, 0x59, 0x60, 0x6A, 0x73, 0x83, 0x8E, 0xA8,
		0x96, 0x63, 0x57, 0x57, 0x67, 0x9B, 0xC3, 0xC5, 0xA8, 0x77, 0x52, 0x50, 0x5A, 0x74, 0x88, 0x8A,
		0x8B, 0x8E, 0x97, 0x85, 0x69, 0x64, 0x6E, 0x71, 0x8F, 0xAB, 0xA7, 0x99, 0x88, 0x71, 0x5D, 0x5F,
		0x66, 0x74, 0x7E, 0x93, 0x9E, 0xA2, 0x88, 0x5F, 0x5C, 0x74, 0x83, 0x8A, 0xA1, 0x99, 0x88, 0x73
	};

bool SIRENA::cfgSleep;
TIMER* SIRENA::powerOff;
CH::tEvent SIRENA::event;
SIRENA::tPlay SIRENA::play[];
sint8 SIRENA::lostEventId;

void SIRENA::Init(void)
{
	DBGP_NOTICE("SIRENA: init");

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);

	GPIO_InitTypeDef pin;
	pin.GPIO_Pin	= GPIO_Pin_9;
	pin.GPIO_Mode	= GPIO_Mode_OUT;
	pin.GPIO_Speed	= GPIO_Speed_Level_1;
	pin.GPIO_OType	= GPIO_OType_PP;
	pin.GPIO_PuPd	= GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOB, &pin);

	powerOff = new TIMER();
	lostEventId = -1;
	cfgSleep = true;

	resetPower();

	uint8 i;
	for (i = 0; i <= CH::CHANNELS; i++)
	{
		play[i].stream = NULL;
		play[i].pause = false;
		play[i].stop = false;
		play[i].reset = false;
		play[i].playing = false;
		play[i].beep.time = new TIMER();
		play[i].beep.enable = false;
	}

	CALL::setInterval(ThreadPower, 1000);
	CALL::setImmediate(Thread);

	//AMP::set(44100);
	//DBGF("DATA: open %s", STRBOOL(FS::open(1104, 350711, readCallback, 1000)));

	/*play.melody.address = 1104;
	play.melody.length = 350711;
	play.melody.samples = 44100;
	playRoutione();*/

	/*play.event.lengthType = (PIN::ePulseType)2;
	play.event.pulseType[0].width = 300;
	play.event.pulseType[0].count = 3;
	play.event.pulseType[1].width = 600;
	play.event.pulseType[1].count = 2;
	play.beep.enable = false;*/
	//beepRoutine();

	DBGP_NOTICE("SIRENA: ok");
}

void SIRENA::DeInit(void)
{

}

void SIRENA::resetPower()
{
	if ((GPIOB->ODR & GPIO_Pin_9) == 0)
	{
		GPIOB->BSRR = GPIO_Pin_9;
		DBGP_NOTICE("SIRENA: on");
	}
	powerOff->set(POWEROFF_TIMEOUT);
}

void SIRENA::ThreadPower(__UNUSED void *param)
{
	if
	(
		   !cfgSleep
		|| BT::connected()
		|| CH::active()
		|| play[0].stream != NULL
		|| play[0].beep.enable
		|| play[1].stream != NULL
		|| play[1].beep.enable
		|| play[2].stream != NULL
		|| play[2].beep.enable
	)
	{
		resetPower();
	}
	if ((GPIOB->ODR & GPIO_Pin_9) != 0 && powerOff->finish())
	{
		DBGP_NOTICE("SIRENA: off");
		GPIOB->BRR = GPIO_Pin_9;
	}
}

void SIRENA::Thread(__UNUSED void *param)
{
	if (CH::event(&event))
	{
		resetPower();

		char* tmp = eventToStr(&event);
		if (BT::connected())
		{
			BT::write("+EVENT:");
			BT::send(tmp);
		}
		DBGF_NOTICE("SIRENA: %s", tmp);
		free(tmp);

		if (event.lengthType == PIN::eptPress || event.lengthType == PIN::eptCyclic || event.lengthType > 0)
		{
			play[event.index - 1].playing = true;
			FS::findMelodyCreate(&event, findCallback);
		}
		else if (event.lengthType == PIN::eptRelease)
		{
			playStop(event.index);
		}
	}
	CALL::setImmediate(Thread);
}

void SIRENA::prePlay(uint8 index)
{
	play[3].playing = true;
	FS::preMelodyCreate(index, findCallback);
}

void SIRENA::preStop(void)
{
	playStop(CH::CHANNELS + 1);
}

void SIRENA::findCallback(FS::tFindMelody* find)
{
	DBGF_NOTICE("SIRENA: ch %i melody %i, %i", find->event.index, find->melodyIndex, (int)find->melody.address);
	uint8 index = find->event.index - 1;
	if (
	    (/*find->event.index == 1*/ CH::standard(find->event.index - 1) || find->melody.address > 0)
	    && (find->noPlayAfter == -1 || find->noPlayAfter != lostEventId)
	)
	{
		playOtherPause(find->event.index);
		memcpy(&play[index].event, &find->event, sizeof(find->event));
		memcpy(&play[index].melody, &find->melody, sizeof(find->melody));
		play[index].melodyIndex = find->melodyIndex;
		play[index].poweroff = find->poweroff;
		play[index].volume = find->volume;
		playStart(find->event.index);
	}
	else if (find->event.index == 4)
	{
		char* tmp = (char*)malloc(32);
		sprintf(tmp, "{\"index\":%i}", find->melodyIndex);
		BT::write("+PLAYSTOP:");
		BT::send(tmp);
		sprintf(tmp, "%i", find->melodyIndex);
		DBG::write("+PLAYSTOP:");
		DBG::send(tmp);
		free(tmp);
	}
	else
	{
		play[index].playing = false;
	}
	lostEventId = find->eventId;
	FS::findMelodyRemove(find);
}

void SIRENA::playStart(uint8 chIndex)
{
	tPlay* p = &play[chIndex - 1];
	p->playing = true;
	if (p->stream == NULL && !p->beep.enable)
	{
		playRoutione((FS::tStreamRead*)((uint32)chIndex - 1));
	}
	else
	{
		p->reset = true;
	}
}

void SIRENA::playStop(uint8 chIndex)
{
	tPlay* p = &play[chIndex - 1];
	if (p->event.playToEnd)
	{
		p->event.playOnce = true;
	}
	else if (p->playing)
	{
		p->stop = true;
	}
}

void SIRENA::playOtherPause(uint8 chIndex)
{
	uint8 i;
	chIndex -= 1;
	for (i = 0; i <= CH::CHANNELS; i++)
	{
		if (chIndex != i && (play[i].stream != NULL || play[i].beep.enable) && !play[i].stop)
		{
			play[i].pause = true;
		}
	}
}

bool SIRENA::playHasPause(void)
{
	uint8 i;
	for (i = 0; i <= CH::CHANNELS; i++)
	{
		if ((play[i].stream != NULL || play[i].beep.enable) && !play[i].stop && play[i].pause)
		{
			AMP::set((play[i].beep.enable) ? standardWaveSamples : play[i].melody.samples);
			play[i].pause = false;
			return true;
			break;
		}
	}
	return false;
}

void SIRENA::beepRoutine(uint8 index)
{
	tPlay* p = &play[index];
	if (p->beep.enable)
	{
		if (p->stop || p->reset)
		{
			p->stop = false;
			p->pause = false;
			p->playing = false;
			p->beep.enable = false;
			if (p->reset)
			{
				p->reset = false;
				p->playing = true;
				CALL::setImmediate((CALL::tCallback)playRoutione, (void*)((uint32)index));
			}
			else
			{
				if (!playHasPause() && p->poweroff)
				{
					powerOff->set(POWEROFF_DELAY);
				}
			}
		}
		else if (p->pause)
		{
			CALL::setTimeout((CALL::tCallback)beepRoutine, 10, (void*)((uint32)index));
		}
		else
		{
			if (p->beep.active)
			{
				uint16 length = AMP::write(&standardWave[p->beep.offset], p->beep.length);
				if (length < p->beep.length)
				{
					p->beep.offset += length;
					p->beep.length -= length;
				}
				else
				{
					if (p->event.playOnce)
					{
						p->stop = true;
					}
					p->beep.length = sizeof(standardWave);
					p->beep.offset = 0;
				}
				if (p->event.lengthType > 0 && p->beep.time->finish())
				{
					p->beep.time->set(400);
					p->beep.active = false;
					p->beep.pulses++;
					if (p->beep.pulses >= p->event.pulseType[p->beep.types].count)
					{
						p->beep.pulses = 0;
						p->beep.types++;
						if (p->beep.types >= p->event.lengthType)
						{
							p->stop = true;
						}
					}
				}
			}
			else
			{
				uint8 nullSmp = 0x80;
				AMP::write(&nullSmp, 1);
				if (p->beep.time->finish())
				{
					p->beep.time->set(p->event.pulseType[p->beep.types].width);
					p->beep.length = sizeof(standardWave);
					p->beep.offset = 0;
					p->beep.active = true;
				}
			}
			CALL::setTimeout((CALL::tCallback)beepRoutine, 2, (void*)((uint32)index));
		}
	}
	else
	{
		AMP::set(standardWaveSamples);
		AMP::volume(AMP::cfgVolumeBeep);
		p->beep.enable = true;
		p->beep.active = (p->event.lengthType == PIN::eptPress || p->event.lengthType == PIN::eptCyclic);
		p->beep.time->set();
		p->beep.pulses = 0;
		p->beep.types = 0;
		CALL::setImmediate((CALL::tCallback)beepRoutine, (void*)((uint32)index));
	}
}

void SIRENA::playRoutione(FS::tStreamRead* stream)
{
	if ((uint32)stream <= CH::CHANNELS)
	{
		uint8 i = (uint32)stream;
		if (play[i].melody.address > 0)
		{
			AMP::set(play[i].melody.samples);
			AMP::volume(play[i].volume);
			play[i].stream = FS::open(play[i].melody.address, play[i].melody.length, playRoutione, 1000, &play[i]);
		}
		else
		{
			beepRoutine(i);
		}
		return;
	}
	tPlay* p = (tPlay*)stream->tag;
	if (p != NULL)
	{
		if (p->stop || p->reset)
		{
			p->stop = false;
			p->pause = false;
			p->playing = false;
			FS::close(stream);
			p->stream = NULL;
			if (p->reset)
			{
				p->reset = false;
				p->playing = true;
				CALL::setImmediate((CALL::tCallback)playRoutione, (void*)(p->event.index - 1));
			}
			else
			{
				if (!playHasPause() && p->poweroff)
				{
					powerOff->set(POWEROFF_DELAY);
				}
			}
		}
		else if (p->pause)
		{
			CALL::setTimeout((CALL::tCallback)playRoutione, 10, stream);
		}
		else
		{
			if (stream->data.error)
			{
				FS::close(stream);
				p->stream = NULL;
				beepRoutine(p->event.index - 1);
				DBGP_NOTICE("SIRENA: error stream");
			}
			else
			{
				uint16 length = AMP::write(&stream->data.buffer[stream->data.offset], stream->data.length);
				if (length < stream->data.length)
				{
					stream->data.offset += length;
					stream->data.length -= length;
					//CALL::setTimeout((CALL::tCallback)playRoutione, 2, stream);
					CALL::setImmediate((CALL::tCallback)playRoutione, stream);
				}
				else
				{
					if (stream->data.eof)
					{
						FS::close(stream);
						p->stream = NULL;
						if (!p->event.playOnce && (p->event.lengthType == PIN::eptPress || p->event.lengthType == PIN::eptCyclic))
						{
							playStart(p->event.index);
						}
						else
						{
							if (p->event.index == 4)
							{
								char* tmp = (char*)malloc(32);
								sprintf(tmp, "{\"index\":%i}", p->melodyIndex);
								BT::write("+PLAYSTOP:");
								BT::send(tmp);
								sprintf(tmp, "%i", p->melodyIndex);
								DBG::write("+PLAYSTOP:");
								DBG::send(tmp);
								free(tmp);
							}
							if (!playHasPause() && p->poweroff)
							{
								powerOff->set(POWEROFF_DELAY);
							}
							p->playing = false;
						}
					}
					else
					{
						FS::next(stream);
					}
				}
			}
		}
	}
	else
	{
		DBGP_WARNING("SIRENA: no stream");
	}
}

char* SIRENA::eventToStr(CH::tEvent* event)
{
	char* tmp = (char*)malloc(256);
	int l;
	uint8 i;
	bool f;
	l = sprintf(tmp, "{\"index\":%i", event->index);
	if (event->lengthType == PIN::eptNull)
	{
		l += sprintf(&tmp[l], ",\"type\":null");
	}
	else
	{
		if (event->lengthType > PIN::eptNull)
		{
			l += sprintf(&tmp[l], ",\"type\":\"pulse\",\"pulse\":[");
			for (i = 0, f = false; i < event->lengthType; i++)
			{
				if (f)
				{
					tmp[l] = ',';
					l++;
					tmp[l] = '\0';
				}
				else
				{
					f = true;
				}
				l += sprintf(&tmp[l], "{\"width\":%u,\"count\":%u}", event->pulseType[i].width, event->pulseType[i].count);
			}
			l += sprintf(&tmp[l], "]");
		}
		else if (event->lengthType == PIN::eptPress)
		{
			l += sprintf(&tmp[l], ",\"type\":\"press\"");
		}
		else if (event->lengthType == PIN::eptRelease)
		{
			l += sprintf(&tmp[l], ",\"type\":\"release\"");
		}
		else if (event->lengthType == PIN::eptCyclic)
		{
			l += sprintf(&tmp[l], ",\"type\":\"cyclic\"");
		}
		else if (event->lengthType == PIN::eptMeasure)
		{
			l += sprintf(&tmp[l], ",\"type\":\"measure\"");
			l += sprintf(&tmp[l], ",\"measure\":{\"width\":%u,\"idle\":%u}", event->pulseType[0].width, event->pulseType[0].count);
		}
		else if (event->lengthType == PIN::eptErrMeasure)
		{
			l += sprintf(&tmp[l], ",\"type\":\"errMeasure\"");
		}
		else
		{
			l += sprintf(&tmp[l], ",\"type\":\"error\"");
		}
	}
	l += sprintf(&tmp[l], "}");
	//DBGF("SIRENA::eventToStr: %i", l)
	return tmp;
}
